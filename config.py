content='import os\nfrom pathlib import Path\nfrom typing import Dict, Any\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Config:\n    # Basic Flask configuration\n    SECRET_KEY = os.getenv(\'SECRET_KEY\', \'default-secret-key-for-development\')\n    DEBUG = os.getenv(\'FLASK_DEBUG\', \'False\').lower() == \'true\'\n    TESTING = os.getenv(\'TESTING\', \'False\').lower() == \'true\'\n\n    # API configuration\n    API_VERSION = \'1.0\'\n    API_TITLE = \'File Path Fix Test API\'\n    API_PREFIX = \'/api/v1\'\n\n    # File path settings\n    BASE_DIR = Path(__file__).resolve().parent\n    UPLOAD_FOLDER = os.path.join(BASE_DIR, \'uploads\')\n    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB max file size\n    ALLOWED_EXTENSIONS = {\'txt\', \'pdf\', \'png\', \'jpg\', \'jpeg\', \'gif\'}\n\n    # Database configuration (if needed)\n    SQLALCHEMY_DATABASE_URI = os.getenv(\'DATABASE_URL\', \'sqlite:///test.db\')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n\n    # Logging configuration\n    LOG_LEVEL = os.getenv(\'LOG_LEVEL\', \'INFO\')\n    LOG_FORMAT = \'%(asctime)s - %(name)s - %(levelname)s - %(message)s\'\n    LOG_FILE = os.path.join(BASE_DIR, \'logs\', \'app.log\')\n\n    @classmethod\n    def get_config(cls) -> Dict[str, Any]:\n        """\n        Returns configuration as a dictionary.\n        """\n        return {\n            key: value for key, value in cls.__dict__.items()\n            if not key.startswith(\'__\') and not callable(value)\n        }\n\n    @classmethod\n    def init_app(cls, app) -> None:\n        """\n        Initialize application configuration.\n        """\n        # Create necessary directories\n        os.makedirs(cls.UPLOAD_FOLDER, exist_ok=True)\n        os.makedirs(os.path.dirname(cls.LOG_FILE), exist_ok=True)\n\n        # Configure logging\n        import logging\n        logging.basicConfig(\n            filename=cls.LOG_FILE,\n            level=getattr(logging, cls.LOG_LEVEL.upper()),\n            format=cls.LOG_FORMAT\n        )\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    DEVELOPMENT = True\n\nclass TestingConfig(Config):\n    TESTING = True\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = \'sqlite:///:memory:\'\n\nclass ProductionConfig(Config):\n    DEBUG = False\n    DEVELOPMENT = False\n\n    def __init__(self):\n        if not self.SECRET_KEY or self.SECRET_KEY == \'default-secret-key-for-development\':\n            raise ValueError(\'Production SECRET_KEY must be set in environment variables\')\n\n# Configuration dictionary\nconfig = {\n    \'development\': DevelopmentConfig,\n    \'testing\': TestingConfig,\n    \'production\': ProductionConfig,\n    \'default\': DevelopmentConfig\n}\n\ndef get_config_by_name(config_name: str = None) -> Config:\n    """\n    Get configuration class by name.\n    Args:\n        config_name: The name of the configuration to use\n    Returns:\n        Config class\n    """\n    if not config_name:\n        config_name = os.getenv(\'FLASK_ENV\', \'default\')\n    return config.get(config_name, config[\'default\'])' additional_kwargs={} response_metadata={'id': 'msg_01Gh3Yavn8BWNquYkjZ2o4zh', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 339, 'output_tokens': 896, 'service_tier': 'standard'}} id='run--119182f4-2a93-465a-8737-adcde9baf6b0-0' usage_metadata={'input_tokens': 339, 'output_tokens': 896, 'total_tokens': 1235, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}