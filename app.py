content="import os\nfrom flask import Flask, request, jsonify\nfrom werkzeug.utils import secure_filename\nimport logging\nfrom logging.handlers import RotatingFileHandler\nfrom datetime import datetime\n\n# Initialize Flask app\napp = Flask(__name__)\n\n# Configure logging\nif not os.path.exists('logs'):\n    os.makedirs('logs')\n\nfile_handler = RotatingFileHandler('logs/app.log', maxBytes=10240, backupCount=10)\nfile_handler.setFormatter(logging.Formatter(\n    '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'\n))\nfile_handler.setLevel(logging.INFO)\napp.logger.addHandler(file_handler)\napp.logger.setLevel(logging.INFO)\napp.logger.info('File Path Fix Test API startup')\n\n# Configure upload folder\nUPLOAD_FOLDER = 'uploads'\nif not os.path.exists(UPLOAD_FOLDER):\n    os.makedirs(UPLOAD_FOLDER)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n# Allowed file extensions\nALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route('/')\ndef index():\n    return jsonify({\n        'status': 'online',\n        'message': 'File Path Fix Test API',\n        'timestamp': datetime.now().isoformat()\n    })\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    try:\n        if 'file' not in request.files:\n            return jsonify({'error': 'No file part'}), 400\n        \n        file = request.files['file']\n        if file.filename == '':\n            return jsonify({'error': 'No selected file'}), 400\n        \n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            file.save(filepath)\n            \n            app.logger.info(f'File uploaded successfully: {filename}')\n            return jsonify({\n                'message': 'File uploaded successfully',\n                'filename': filename,\n                'filepath': filepath\n            })\n        else:\n            return jsonify({'error': 'File type not allowed'}), 400\n            \n    except Exception as e:\n        app.logger.error(f'Error uploading file: {str(e)}')\n        return jsonify({'error': 'Internal server error'}), 500\n\n@app.route('/files', methods=['GET'])\ndef list_files():\n    try:\n        files = []\n        for filename in os.listdir(app.config['UPLOAD_FOLDER']):\n            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            files.append({\n                'filename': filename,\n                'filepath': filepath,\n                'size': os.path.getsize(filepath),\n                'created': datetime.fromtimestamp(os.path.getctime(filepath)).isoformat()\n            })\n        return jsonify({'files': files})\n    \n    except Exception as e:\n        app.logger.error(f'Error listing files: {str(e)}')\n        return jsonify({'error': 'Internal server error'}), 500\n\n@app.route('/files/<filename>', methods=['GET'])\ndef get_file_info(filename):\n    try:\n        filepath = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(filename))\n        if not os.path.exists(filepath):\n            return jsonify({'error': 'File not found'}), 404\n            \n        return jsonify({\n            'filename': filename,\n            'filepath': filepath,\n            'size': os.path.getsize(filepath),\n            'created': datetime.fromtimestamp(os.path.getctime(filepath)).isoformat()\n        })\n        \n    except Exception as e:\n        app.logger.error(f'Error getting file info: {str" additional_kwargs={} response_metadata={'id': 'msg_014qLimtsQiGKQkTvzEqTY84', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 343, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--84995264-dba6-495b-acef-5cc20bdd5f29-0' usage_metadata={'input_tokens': 343, 'output_tokens': 1024, 'total_tokens': 1367, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}