content='import unittest\nimport json\nfrom app import app\n\nclass TestFilePathFixAPI(unittest.TestCase):\n    def setUp(self):\n        self.app = app.test_client()\n        self.app.testing = True\n        self.test_file = {\n            "name": "test.txt",\n            "path": "/path/to/test.txt",\n            "content": "Test content"\n        }\n\n    def test_health_check(self):\n        response = self.app.get(\'/health\')\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.json, {"status": "healthy"})\n\n    def test_create_file(self):\n        response = self.app.post(\'/files\',\n                               data=json.dumps(self.test_file),\n                               content_type=\'application/json\')\n        self.assertEqual(response.status_code, 201)\n        data = json.loads(response.data)\n        self.assertIn(\'id\', data)\n        self.assertEqual(data[\'name\'], self.test_file[\'name\'])\n\n    def test_get_file(self):\n        # First create a file\n        create_response = self.app.post(\'/files\',\n                                      data=json.dumps(self.test_file),\n                                      content_type=\'application/json\')\n        file_id = json.loads(create_response.data)[\'id\']\n\n        # Then retrieve it\n        response = self.app.get(f\'/files/{file_id}\')\n        self.assertEqual(response.status_code, 200)\n        data = json.loads(response.data)\n        self.assertEqual(data[\'name\'], self.test_file[\'name\'])\n        self.assertEqual(data[\'path\'], self.test_file[\'path\'])\n\n    def test_get_all_files(self):\n        response = self.app.get(\'/files\')\n        self.assertEqual(response.status_code, 200)\n        data = json.loads(response.data)\n        self.assertIsInstance(data, list)\n\n    def test_update_file(self):\n        # First create a file\n        create_response = self.app.post(\'/files\',\n                                      data=json.dumps(self.test_file),\n                                      content_type=\'application/json\')\n        file_id = json.loads(create_response.data)[\'id\']\n\n        # Update the file\n        updated_data = {\n            "name": "updated.txt",\n            "path": "/path/to/updated.txt",\n            "content": "Updated content"\n        }\n        response = self.app.put(f\'/files/{file_id}\',\n                              data=json.dumps(updated_data),\n                              content_type=\'application/json\')\n        self.assertEqual(response.status_code, 200)\n        data = json.loads(response.data)\n        self.assertEqual(data[\'name\'], updated_data[\'name\'])\n\n    def test_delete_file(self):\n        # First create a file\n        create_response = self.app.post(\'/files\',\n                                      data=json.dumps(self.test_file),\n                                      content_type=\'application/json\')\n        file_id = json.loads(create_response.data)[\'id\']\n\n        # Delete the file\n        response = self.app.delete(f\'/files/{file_id}\')\n        self.assertEqual(response.status_code, 204)\n\n        # Verify file is deleted\n        get_response = self.app.get(f\'/files/{file_id}\')\n        self.assertEqual(get_response.status_code, 404)\n\n    def test_invalid_file_id(self):\n        response = self.app.get(\'/files/999999\')\n        self.assertEqual(response.status_code, 404)\n\n    def test_invalid_create_request(self):\n        invalid_file = {\n            "name": "test.txt"\n            # Missing required fields\n        }\n        response = self.app.post(\'/files\',\n                               data=json.dumps(invalid_file),\n                               content_type=\'application/json\')\n        self.assertEqual(response.status_code, 400)\n\n    def test_invalid_update_request(self):\n        response = self.app.put(\'/files/' additional_kwargs={} response_metadata={'id': 'msg_01DuAzKXoHxJLyF4KFYZu7h3', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 343, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--142c0718-5911-4853-b15e-29ad2cd2b9aa-0' usage_metadata={'input_tokens': 343, 'output_tokens': 1024, 'total_tokens': 1367, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}