content='import unittest\nimport os\nfrom unittest.mock import patch, MagicMock\nfrom api.services.path_service import PathService\n\nclass TestPathService(unittest.TestCase):\n    def setUp(self):\n        self.path_service = PathService()\n        self.test_path = "/test/path/file.txt"\n        self.test_directory = "/test/path"\n        \n    def test_normalize_path(self):\n        test_cases = [\n            ("\\\\test\\\\path\\\\file.txt", "/test/path/file.txt"),\n            ("test/path/file.txt", "/test/path/file.txt"),\n            ("/test/path/file.txt", "/test/path/file.txt"),\n            ("test\\\\path\\\\file.txt", "/test/path/file.txt"),\n        ]\n        \n        for input_path, expected in test_cases:\n            result = self.path_service.normalize_path(input_path)\n            self.assertEqual(result, expected)\n            \n    def test_normalize_path_with_empty_input(self):\n        with self.assertRaises(ValueError):\n            self.path_service.normalize_path("")\n            \n    def test_normalize_path_with_none_input(self):\n        with self.assertRaises(ValueError):\n            self.path_service.normalize_path(None)\n            \n    def test_validate_path(self):\n        valid_paths = [\n            "/test/path/file.txt",\n            "/var/log/app.log",\n            "/home/user/documents/file.pdf"\n        ]\n        \n        for path in valid_paths:\n            result = self.path_service.validate_path(path)\n            self.assertTrue(result)\n            \n    def test_validate_path_with_invalid_chars(self):\n        invalid_paths = [\n            "/test/path/file*.txt",\n            "/test/path/file?.txt",\n            "/test/path/file<>.txt",\n            "/test/path/file|.txt"\n        ]\n        \n        for path in invalid_paths:\n            with self.assertRaises(ValueError):\n                self.path_service.validate_path(path)\n                \n    @patch(\'os.path.exists\')\n    def test_ensure_directory_exists(self, mock_exists):\n        mock_exists.return_value = False\n        \n        with patch(\'os.makedirs\') as mock_makedirs:\n            self.path_service.ensure_directory_exists(self.test_directory)\n            mock_makedirs.assert_called_once_with(self.test_directory, exist_ok=True)\n            \n    @patch(\'os.path.exists\')\n    def test_ensure_directory_exists_already_exists(self, mock_exists):\n        mock_exists.return_value = True\n        \n        with patch(\'os.makedirs\') as mock_makedirs:\n            self.path_service.ensure_directory_exists(self.test_directory)\n            mock_makedirs.assert_not_called()\n            \n    def test_get_file_extension(self):\n        test_cases = [\n            ("/test/path/file.txt", ".txt"),\n            ("/test/path/file.tar.gz", ".gz"),\n            ("/test/path/file", ""),\n            ("/test/path/.gitignore", ""),\n        ]\n        \n        for input_path, expected in test_cases:\n            result = self.path_service.get_file_extension(input_path)\n            self.assertEqual(result, expected)\n            \n    def test_get_filename(self):\n        test_cases = [\n            ("/test/path/file.txt", "file.txt"),\n            ("/test/path/file.tar.gz", "file.tar.gz"),\n            ("/test/path/file", "file"),\n            ("/test/path/.gitignore", ".gitignore"),\n        ]\n        \n        for input_path, expected in test_cases:\n            result = self.path_service.get_filename(input_path)\n            self.assertEqual(result, expected)\n            \n    def test_join_paths(self):\n        test_cases = [\n            (("/test", "path", "file.txt' additional_kwargs={} response_metadata={'id': 'msg_01LUxrcEBmaQSUyQhFXQyqMG', 'model': 'claude-3-5-sonnet-20241022', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 347, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--91a4f86c-73ee-4c6d-8610-870f8ed029b0-0' usage_metadata={'input_tokens': 347, 'output_tokens': 1024, 'total_tokens': 1371, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}